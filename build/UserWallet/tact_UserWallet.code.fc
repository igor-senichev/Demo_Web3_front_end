#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_UserWallet.headers.fc";
#include "tact_UserWallet.stdlib.fc";
#include "tact_UserWallet.constants.fc";
#include "tact_UserWallet.storage.fc";

;;
;; Contract UserWallet functions
;;

(slice, int) $UserWallet$_contract_init(slice $owner) impure inline_ref {
    var (($self'owner, $self'balance)) = (null(), null());
    $self'owner = $owner;
    $self'balance = 0;
    return ($self'owner, $self'balance);
}

((slice, int), int) $UserWallet$_fun_getBalance((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'balance)) = $self;
    return (($self'owner, $self'balance), $self'balance);
}

;;
;; Receivers of a Contract UserWallet
;;

(((slice, int)), ()) $UserWallet$_internal_binary_TransferToMaster((slice, int) $self, (int, slice) $msg) impure inline {
    var ($self'owner, $self'balance) = $self;
    var ($msg'amount, $msg'masterAddress) = $msg;
    throw_unless(49469, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'balance = ($self'balance - $msg'amount);
    $global_send($SendParameters$_constructor_to_value_mode($msg'masterAddress, $msg'amount, 2));
    ($self'owner, $self'balance)~$UserWallet$_fun_reply(__gen_cell_comment_10f2ebd86f63107b9f945e28eb1ea1494ab859a1428e954da86e2a064cd49c4d());
    return (($self'owner, $self'balance), ());
}

(((slice, int)), ()) $UserWallet$_internal_binary_TransferToUser((slice, int) $self, (int, slice) $msg) impure inline {
    var ($self'owner, $self'balance) = $self;
    var ($msg'amount, $msg'userAddress) = $msg;
    $self'balance = ($self'balance + $msg'amount);
    $global_send($SendParameters$_constructor_to_value_mode($self'owner, $msg'amount, 2));
    ($self'owner, $self'balance)~$UserWallet$_fun_reply(__gen_cell_comment_f7f9012ca558e2efc0564fd1f3eb7bcff887d40059d41999b37b56984f28284d());
    return (($self'owner, $self'balance), ());
}

(((slice, int)), ()) $UserWallet$_internal_binary_Deploy((slice, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'balance) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'balance)~$UserWallet$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'balance), ());
}

;;
;; Get methods of a Contract UserWallet
;;

_ %getBalance() method_id(106323) {
    var self = $UserWallet$_contract_load();
    var res = self~$UserWallet$_fun_getBalance();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmRywGBz81U9TVDAoS3LETN3uG7VMfqEHRyeLYc1PCSnpo";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract UserWallet
;;

((slice, int), int) $UserWallet$_contract_router_internal((slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive TransferToMaster message
    if (op == 2969903496) {
        var msg = in_msg~$TransferToMaster$_load();
        self~$UserWallet$_internal_binary_TransferToMaster(msg);
        return (self, true);
    }
    
    ;; Receive TransferToUser message
    if (op == 3636692119) {
        var msg = in_msg~$TransferToUser$_load();
        self~$UserWallet$_internal_binary_TransferToUser(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$UserWallet$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $UserWallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$UserWallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $UserWallet$_contract_store(self);
}
