#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_SampleJettonMaster.headers.fc";
#include "tact_SampleJettonMaster.stdlib.fc";
#include "tact_SampleJettonMaster.constants.fc";
#include "tact_SampleJettonMaster.storage.fc";

;;
;; Contract SampleJettonMaster functions
;;

(int) $SampleJettonMaster$_contract_init() impure inline_ref {
    var (($self'balance)) = (null());
    $self'balance = 0;
    return ($self'balance);
}

((int), int) $SampleJettonMaster$_fun_getBalance((int) $self) impure inline_ref {
    var (($self'balance)) = $self;
    return (($self'balance), $self'balance);
}

;;
;; Receivers of a Contract SampleJettonMaster
;;

(((int)), ()) $SampleJettonMaster$_internal_binary_InternalAdd((int) $self, (int, slice) $msg) impure inline {
    var ($self'balance) = $self;
    var ($msg'amount, $msg'origin) = $msg;
    $self'balance = ($self'balance + $msg'amount);
    ($self'balance)~$SampleJettonMaster$_fun_reply(__gen_cell_comment_c3bcbee1bd859dfac051c104689df557a3bb741022be179b63514d5d268468c6());
    return (($self'balance), ());
}

(((int)), ()) $SampleJettonMaster$_internal_binary_TransferToUser((int) $self, (int, slice) $msg) impure inline {
    var ($self'balance) = $self;
    var ($msg'amount, $msg'userAddress) = $msg;
    throw_unless(54615, ($self'balance >= $msg'amount));
    $self'balance = ($self'balance - $msg'amount);
    $global_send($SendParameters$_constructor_to_value_mode($msg'userAddress, $msg'amount, 2));
    ($self'balance)~$SampleJettonMaster$_fun_reply(__gen_cell_comment_0f32dca96df7786079249ab5aafcd50c098db704c1be633bdc1d54e562a1829a());
    return (($self'balance), ());
}

(((int)), ()) $SampleJettonMaster$_internal_binary_Deploy((int) $self, (int) $deploy) impure inline {
    var ($self'balance) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'balance)~$SampleJettonMaster$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'balance), ());
}

;;
;; Get methods of a Contract SampleJettonMaster
;;

_ %getBalance() method_id(106323) {
    var self = $SampleJettonMaster$_contract_load();
    var res = self~$SampleJettonMaster$_fun_getBalance();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmWPn18hDcP4z7tNVdtYZEgN2rg8NXARyT8AkmFhY5ufLy";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SampleJettonMaster
;;

((int), int) $SampleJettonMaster$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive InternalAdd message
    if (op == 306259763) {
        var msg = in_msg~$InternalAdd$_load();
        self~$SampleJettonMaster$_internal_binary_InternalAdd(msg);
        return (self, true);
    }
    
    ;; Receive TransferToUser message
    if (op == 3636692119) {
        var msg = in_msg~$TransferToUser$_load();
        self~$SampleJettonMaster$_internal_binary_TransferToUser(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SampleJettonMaster$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SampleJettonMaster$_contract_load();
    
    ;; Handle operation
    int handled = self~$SampleJettonMaster$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SampleJettonMaster$_contract_store(self);
}
